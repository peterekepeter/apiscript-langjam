
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AS BOOLEAN CAPTURING_SEGMENT CLOSE_BRACES CLOSE_BRACKET CLOSE_PAREN COLON COMMA DOLLAR_SIGN DOT DOUBLE EXCLUDE FK FORMAT INTEGER JOIN LAMBDA METHOD NAME NULL OPEN_BRACES OPEN_BRACKET OPEN_PAREN PATH_SEGMENT PIPE SELECT SEMICOLON STRING TABLE UPDIR_SEGMENTprogram : emptyprogram : endpoint_definition programprogram : table_definition programtable_definition : TABLE NAME OPEN_BRACES table_columns CLOSE_BRACEStable_columns : table_column table_columns_not_whitespace\n                     | empty\n    table_columns_not_whitespace : table_column table_columns_not_whitespace\n                                    | empty\n    table_column : NAME COLON table_column_type opt_table_column_types SEMICOLONopt_table_column_types : table_column_types\n                              | empty\n    table_column_types : table_column_type table_column_types\n                          | table_column_type\n    table_column_type : NAME\n                         | FK OPEN_PAREN NAME DOT NAME AS NAME CLOSE_PAREN\n    endpoint_definition : METHOD endpoint LAMBDA statement SEMICOLONendpoint : DOT endpoint_not_start\n                | UPDIR_SEGMENT endpoint_not_start\n                | endpoint_not_start\n    endpoint_not_start : PATH_SEGMENT opt_endpoint\n                          | CAPTURING_SEGMENT opt_endpoint\n    opt_endpoint : endpoint\n                    | empty\n    statement : command commandscommands : PIPE command commands\n                | empty\n    command : raw_valuecommand : DOLLAR_SIGN NAMEcommand : FORMAT NAME\n               | EXCLUDE compound_name_list\n               | JOIN db_query\n               | SELECT db_query\n    compound_name_list : compound_name compound_name_list_not_start\n                          | empty\n    compound_name_list_not_start : COMMA compound_name compound_name_list_not_start\n                                    | empty\n    compound_name : NAME DOT compound_name\n                     | NAME\n    db_query_list : db_query_item COMMA db_query_list\n                     | db_query_item\n                     | empty\n    db_query_item : db_query\n                     | NAME\n    db_query : compound_name OPEN_PAREN db_query_list CLOSE_PARENraw_value : STRING\n                 | INTEGER\n                 | DOUBLE\n                 | BOOLEAN\n                 | NULL\n                 | list\n                 | object\n    list : OPEN_BRACKET list_elements CLOSE_BRACKETlist_elements : raw_value COMMA list_elements\n                     | empty\n    object : OPEN_BRACES object_elements CLOSE_BRACESobject_elements : STRING COLON raw_value COMMA object_elements\n                       | empty\n    empty : '
    
_lr_action_items = {'$end':([0,1,2,3,4,7,8,45,65,],[-58,0,-1,-58,-58,-2,-3,-16,-4,]),'METHOD':([0,3,4,45,65,],[5,5,5,-16,-4,]),'TABLE':([0,3,4,45,65,],[6,6,6,-16,-4,]),'DOT':([5,13,14,54,90,104,],[10,10,10,73,73,107,]),'UPDIR_SEGMENT':([5,13,14,],[12,12,12,]),'PATH_SEGMENT':([5,10,12,13,14,],[13,13,13,13,13,]),'CAPTURING_SEGMENT':([5,10,12,13,14,],[14,14,14,14,14,]),'NAME':([6,23,27,28,29,30,31,43,64,66,71,73,74,79,80,93,97,100,103,107,109,111,],[15,41,49,50,54,54,54,41,79,41,54,54,90,-14,79,79,104,90,-9,108,110,-15,]),'LAMBDA':([9,11,13,14,17,18,19,20,21,22,],[16,-19,-58,-58,-17,-18,-20,-22,-23,-21,]),'OPEN_BRACES':([15,16,39,47,76,78,],[23,40,40,40,40,40,]),'DOLLAR_SIGN':([16,47,],[27,27,]),'FORMAT':([16,47,],[28,28,]),'EXCLUDE':([16,47,],[29,29,]),'JOIN':([16,47,],[30,30,]),'SELECT':([16,47,],[31,31,]),'STRING':([16,39,40,47,76,78,101,],[32,32,62,32,32,32,62,]),'INTEGER':([16,39,47,76,78,],[33,33,33,33,33,]),'DOUBLE':([16,39,47,76,78,],[34,34,34,34,34,]),'BOOLEAN':([16,39,47,76,78,],[35,35,35,35,35,]),'NULL':([16,39,47,76,78,],[36,36,36,36,36,]),'OPEN_BRACKET':([16,39,47,76,78,],[39,39,39,39,39,]),'CLOSE_BRACES':([23,40,42,43,44,61,63,66,67,68,82,101,103,106,],[-58,-58,65,-58,-6,77,-57,-58,-5,-8,-7,-58,-9,-56,]),'SEMICOLON':([24,25,26,29,32,33,34,35,36,37,38,46,48,49,50,51,52,53,54,55,57,69,70,72,75,77,79,80,83,84,85,93,94,95,96,98,99,102,111,],[45,-58,-27,-58,-45,-46,-47,-48,-49,-50,-51,-24,-26,-28,-29,-30,-58,-34,-38,-31,-32,-58,-33,-36,-52,-55,-14,-58,-25,-58,-37,-13,103,-10,-11,-35,-44,-12,-15,]),'PIPE':([25,26,29,32,33,34,35,36,37,38,49,50,51,52,53,54,55,57,69,70,72,75,77,84,85,98,99,],[47,-27,-58,-45,-46,-47,-48,-49,-50,-51,-28,-29,-30,-58,-34,-38,-31,-32,47,-33,-36,-52,-55,-58,-37,-35,-44,]),'COMMA':([32,33,34,35,36,37,38,52,54,59,75,77,84,85,87,89,90,92,99,],[-45,-46,-47,-48,-49,-50,-51,71,-38,76,-52,-55,71,-37,100,-42,-43,101,-44,]),'CLOSE_BRACKET':([39,58,60,76,91,],[-58,75,-54,-58,-53,]),'COLON':([41,62,],[64,78,]),'OPEN_PAREN':([54,56,81,85,90,],[-38,74,97,-37,-38,]),'FK':([64,79,80,93,111,],[81,-14,81,81,-15,]),'CLOSE_PAREN':([74,86,87,88,89,90,99,100,105,110,],[-58,99,-40,-41,-42,-43,-44,-58,-39,111,]),'AS':([108,],[109,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,3,4,],[1,7,8,]),'empty':([0,3,4,13,14,23,25,29,39,40,43,52,66,69,74,76,80,84,100,101,],[2,2,2,21,21,44,48,53,60,63,68,72,68,48,88,60,96,72,88,63,]),'endpoint_definition':([0,3,4,],[3,3,3,]),'table_definition':([0,3,4,],[4,4,4,]),'endpoint':([5,13,14,],[9,20,20,]),'endpoint_not_start':([5,10,12,13,14,],[11,17,18,11,11,]),'opt_endpoint':([13,14,],[19,22,]),'statement':([16,],[24,]),'command':([16,47,],[25,69,]),'raw_value':([16,39,47,76,78,],[26,59,26,59,92,]),'list':([16,39,47,76,78,],[37,37,37,37,37,]),'object':([16,39,47,76,78,],[38,38,38,38,38,]),'table_columns':([23,],[42,]),'table_column':([23,43,66,],[43,66,66,]),'commands':([25,69,],[46,83,]),'compound_name_list':([29,],[51,]),'compound_name':([29,30,31,71,73,74,100,],[52,56,56,84,85,56,56,]),'db_query':([30,31,74,100,],[55,57,89,89,]),'list_elements':([39,76,],[58,91,]),'object_elements':([40,101,],[61,106,]),'table_columns_not_whitespace':([43,66,],[67,82,]),'compound_name_list_not_start':([52,84,],[70,98,]),'table_column_type':([64,80,93,],[80,93,93,]),'db_query_list':([74,100,],[86,105,]),'db_query_item':([74,100,],[87,87,]),'opt_table_column_types':([80,],[94,]),'table_column_types':([80,93,],[95,102,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> empty','program',1,'p_program','parser.py',10),
  ('program -> endpoint_definition program','program',2,'p_program_endpoint','parser.py',18),
  ('program -> table_definition program','program',2,'p_program_table','parser.py',26),
  ('table_definition -> TABLE NAME OPEN_BRACES table_columns CLOSE_BRACES','table_definition',5,'p_table_definition','parser.py',34),
  ('table_columns -> table_column table_columns_not_whitespace','table_columns',2,'p_table_columns','parser.py',39),
  ('table_columns -> empty','table_columns',1,'p_table_columns','parser.py',40),
  ('table_columns_not_whitespace -> table_column table_columns_not_whitespace','table_columns_not_whitespace',2,'p_table_columns_not_whitespace','parser.py',49),
  ('table_columns_not_whitespace -> empty','table_columns_not_whitespace',1,'p_table_columns_not_whitespace','parser.py',50),
  ('table_column -> NAME COLON table_column_type opt_table_column_types SEMICOLON','table_column',5,'p_table_column','parser.py',59),
  ('opt_table_column_types -> table_column_types','opt_table_column_types',1,'p_opt_table_column_types','parser.py',67),
  ('opt_table_column_types -> empty','opt_table_column_types',1,'p_opt_table_column_types','parser.py',68),
  ('table_column_types -> table_column_type table_column_types','table_column_types',2,'p_table_column_types','parser.py',77),
  ('table_column_types -> table_column_type','table_column_types',1,'p_table_column_types','parser.py',78),
  ('table_column_type -> NAME','table_column_type',1,'p_table_column_type','parser.py',90),
  ('table_column_type -> FK OPEN_PAREN NAME DOT NAME AS NAME CLOSE_PAREN','table_column_type',8,'p_table_column_type','parser.py',91),
  ('endpoint_definition -> METHOD endpoint LAMBDA statement SEMICOLON','endpoint_definition',5,'p_endpoint_definition','parser.py',108),
  ('endpoint -> DOT endpoint_not_start','endpoint',2,'p_endpoint','parser.py',117),
  ('endpoint -> UPDIR_SEGMENT endpoint_not_start','endpoint',2,'p_endpoint','parser.py',118),
  ('endpoint -> endpoint_not_start','endpoint',1,'p_endpoint','parser.py',119),
  ('endpoint_not_start -> PATH_SEGMENT opt_endpoint','endpoint_not_start',2,'p_endpoint_not_start','parser.py',128),
  ('endpoint_not_start -> CAPTURING_SEGMENT opt_endpoint','endpoint_not_start',2,'p_endpoint_not_start','parser.py',129),
  ('opt_endpoint -> endpoint','opt_endpoint',1,'p_opt_endpoint','parser.py',135),
  ('opt_endpoint -> empty','opt_endpoint',1,'p_opt_endpoint','parser.py',136),
  ('statement -> command commands','statement',2,'p_statement','parser.py',145),
  ('commands -> PIPE command commands','commands',3,'p_commands','parser.py',150),
  ('commands -> empty','commands',1,'p_commands','parser.py',151),
  ('command -> raw_value','command',1,'p_command_raw','parser.py',160),
  ('command -> DOLLAR_SIGN NAME','command',2,'p_command_variable','parser.py',168),
  ('command -> FORMAT NAME','command',2,'p_command_keyword','parser.py',179),
  ('command -> EXCLUDE compound_name_list','command',2,'p_command_keyword','parser.py',180),
  ('command -> JOIN db_query','command',2,'p_command_keyword','parser.py',181),
  ('command -> SELECT db_query','command',2,'p_command_keyword','parser.py',182),
  ('compound_name_list -> compound_name compound_name_list_not_start','compound_name_list',2,'p_compound_name_list','parser.py',191),
  ('compound_name_list -> empty','compound_name_list',1,'p_compound_name_list','parser.py',192),
  ('compound_name_list_not_start -> COMMA compound_name compound_name_list_not_start','compound_name_list_not_start',3,'p_compound_name_list_not_start','parser.py',201),
  ('compound_name_list_not_start -> empty','compound_name_list_not_start',1,'p_compound_name_list_not_start','parser.py',202),
  ('compound_name -> NAME DOT compound_name','compound_name',3,'p_compound_name','parser.py',211),
  ('compound_name -> NAME','compound_name',1,'p_compound_name','parser.py',212),
  ('db_query_list -> db_query_item COMMA db_query_list','db_query_list',3,'p_db_query_list','parser.py',221),
  ('db_query_list -> db_query_item','db_query_list',1,'p_db_query_list','parser.py',222),
  ('db_query_list -> empty','db_query_list',1,'p_db_query_list','parser.py',223),
  ('db_query_item -> db_query','db_query_item',1,'p_db_query_item','parser.py',234),
  ('db_query_item -> NAME','db_query_item',1,'p_db_query_item','parser.py',235),
  ('db_query -> compound_name OPEN_PAREN db_query_list CLOSE_PAREN','db_query',4,'p_db_query','parser.py',247),
  ('raw_value -> STRING','raw_value',1,'p_raw_value','parser.py',256),
  ('raw_value -> INTEGER','raw_value',1,'p_raw_value','parser.py',257),
  ('raw_value -> DOUBLE','raw_value',1,'p_raw_value','parser.py',258),
  ('raw_value -> BOOLEAN','raw_value',1,'p_raw_value','parser.py',259),
  ('raw_value -> NULL','raw_value',1,'p_raw_value','parser.py',260),
  ('raw_value -> list','raw_value',1,'p_raw_value','parser.py',261),
  ('raw_value -> object','raw_value',1,'p_raw_value','parser.py',262),
  ('list -> OPEN_BRACKET list_elements CLOSE_BRACKET','list',3,'p_list','parser.py',268),
  ('list_elements -> raw_value COMMA list_elements','list_elements',3,'p_list_element','parser.py',276),
  ('list_elements -> empty','list_elements',1,'p_list_element','parser.py',277),
  ('object -> OPEN_BRACES object_elements CLOSE_BRACES','object',3,'p_object','parser.py',286),
  ('object_elements -> STRING COLON raw_value COMMA object_elements','object_elements',5,'p_object_elements','parser.py',294),
  ('object_elements -> empty','object_elements',1,'p_object_elements','parser.py',295),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',306),
]
